'use client'

import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react'
import {
  Employee,
  Workplace,
  ShiftPattern,
  Shift,
  LeaveRequest,
  AIConstraintGuideline,
} from '@/types'

// ==================== Context型定義 ====================

interface ShiftDataContextType {
  // データ
  employees: Employee[]
  workplaces: Workplace[]
  shiftPatterns: ShiftPattern[]
  shifts: Shift[]
  leaveRequests: LeaveRequest[]
  constraints: AIConstraintGuideline[]

  // ローディング状態
  loading: boolean
  setLoading: (loading: boolean) => void

  // 従業員管理
  addEmployee: (employee: Omit<Employee, 'id' | 'created_at' | 'updated_at'>) => Promise<Employee>
  updateEmployee: (id: string, updates: Partial<Employee>) => Promise<void>
  deleteEmployee: (id: string) => Promise<void>
  getEmployeeById: (id: string) => Employee | undefined

  // 配置場所管理
  addWorkplace: (workplace: Omit<Workplace, 'id' | 'created_at' | 'updated_at'>) => Promise<Workplace>
  updateWorkplace: (id: string, updates: Partial<Workplace>) => Promise<void>
  deleteWorkplace: (id: string) => Promise<void>
  getWorkplaceById: (id: string) => Workplace | undefined

  // シフトパターン管理
  addShiftPattern: (pattern: Omit<ShiftPattern, 'id'>) => Promise<ShiftPattern>
  updateShiftPattern: (id: string, updates: Partial<ShiftPattern>) => Promise<void>
  deleteShiftPattern: (id: string) => Promise<void>
  getShiftPatternById: (id: string) => ShiftPattern | undefined

  // シフト管理
  addShift: (shift: Omit<Shift, 'id' | 'created_at' | 'updated_at'>) => Promise<Shift>
  updateShift: (id: string, updates: Partial<Shift>) => Promise<void>
  deleteShift: (id: string) => Promise<void>
  getShiftById: (id: string) => Shift | undefined
  getShiftsByMonth: (year: number, month: number) => Shift[]
  bulkUpsertShifts: (shifts: Omit<Shift, 'created_at' | 'updated_at'>[]) => Promise<void>

  // 希望休管理
  addLeaveRequest: (leave: Omit<LeaveRequest, 'id' | 'created_at' | 'updated_at'>) => Promise<LeaveRequest>
  updateLeaveRequest: (id: string, updates: Partial<LeaveRequest>) => Promise<void>
  deleteLeaveRequest: (id: string) => Promise<void>
  getLeaveRequestById: (id: string) => LeaveRequest | undefined
  getLeaveRequestsByMonth: (year: number, month: number) => LeaveRequest[]

  // 制約管理
  addConstraint: (constraint: Omit<AIConstraintGuideline, 'id' | 'created_at' | 'updated_at'>) => Promise<AIConstraintGuideline>
  updateConstraint: (id: string, updates: Partial<AIConstraintGuideline>) => Promise<void>
  deleteConstraint: (id: string) => Promise<void>
  getConstraintById: (id: string) => AIConstraintGuideline | undefined

  // データリフレッシュ
  refreshAllData: () => Promise<void>
}

const ShiftDataContext = createContext<ShiftDataContextType | undefined>(undefined)

// ==================== Provider ====================

export function ShiftDataProvider({ children }: { children: ReactNode }) {
  // ハードコードされた初期データ（開発用）
  const [shiftPatterns, setShiftPatterns] = useState<ShiftPattern[]>([
    { id: '1', name: '早番', start_time: '08:30', end_time: '17:30', break_minutes: 60, color: '#e0f2fe' },
    { id: '2', name: '遅番', start_time: '09:00', end_time: '18:30', break_minutes: 60, color: '#dcfce7' },
    { id: '3', name: '通し番', start_time: '08:30', end_time: '18:30', break_minutes: 60, color: '#fef9c3' },
    { id: '4', name: 'パート(AM)', start_time: '09:00', end_time: '15:00', break_minutes: 0, color: '#fce7f3' },
    { id: '5', name: 'パート(PM)', start_time: '13:00', end_time: '18:00', break_minutes: 0, color: '#f3e8ff' },
  ])

  const [employees, setEmployees] = useState<Employee[]>([
    {
      id: '1',
      name: '看護師A',
      employment_type: '常勤',
      job_type: '看護師',
      assignable_workplaces_by_day: {
        '月': ['D', '処', 'CF外', '健診G', '健診'],
        '火': ['D', '処', 'CF中', 'CF外', '健診G', '健診'],
        '水': ['健診G', '健診'],
        '木': [],
        '金': ['D', 'CF外', '処'],
        '土': ['健診G', '健診']
      },
      assignable_shift_pattern_ids: ['1', '2', '3'],
      day_constraints: [{ if: '水', then: '木' }],
      available_days: ['月', '火', '水', '金', '土'],
      is_active: true,
      created_at: '2024-01-01T00:00:00Z',
      updated_at: '2024-01-01T00:00:00Z'
    },
    {
      id: '2',
      name: 'パート看護師A',
      employment_type: 'パート',
      job_type: '看護師',
      assignable_workplaces_by_day: {
        '月': ['D', '処'],
        '火': ['処'],
        '水': [],
        '木': ['CF外'],
        '金': ['D'],
        '土': []
      },
      assignable_shift_pattern_ids: ['4', '5'],
      day_constraints: [],
      available_days: ['月', '火', '木', '金'],
      is_active: true,
      created_at: '2024-01-01T00:00:00Z',
      updated_at: '2024-01-01T00:00:00Z'
    },
    {
      id: '3',
      name: '臨床検査技師A',
      employment_type: '常勤',
      job_type: '臨床検査技師',
      assignable_workplaces_by_day: {
        '月': ['健診G', '健診', 'CF洗浄'],
        '火': ['CF洗浄', '健診G'],
        '水': [],
        '木': ['健診G', '健診'],
        '金': ['健診', 'CF洗浄'],
        '土': ['CF洗浄', '健診G']
      },
      assignable_shift_pattern_ids: ['1', '2'],
      day_constraints: [],
      available_days: ['月', '火', '木', '金', '土'],
      is_active: true,
      created_at: '2024-01-01T00:00:00Z',
      updated_at: '2024-01-01T00:00:00Z'
    }
  ])

  const [workplaces, setWorkplaces] = useState<Workplace[]>([
    // 月・火・木・土曜日 AM クリニック棟
    { id: '1', name: 'D', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'monday', required_count: 1, order_index: 1, remarks: 'PM、CF不可', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '2', name: '処', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'monday', required_count: 3, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '3', name: 'CF外', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'monday', required_count: 1, order_index: 3, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '4', name: 'CF中', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'monday', required_count: 1, order_index: 4, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    // 月・火・木・土曜日 AM 健診棟
    { id: '5', name: 'CF洗浄', facility: '健診棟', time_slot: 'AM', day_of_week: 'monday', required_count: 1, order_index: 1, remarks: 'AM健診棟の看護助手さんが行う', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '6', name: '健診G', facility: '健診棟', time_slot: 'AM', day_of_week: 'monday', required_count: 2, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '7', name: '健診', facility: '健診棟', time_slot: 'AM', day_of_week: 'monday', required_count: 4, order_index: 3, remarks: '最低3人', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    // 月・火・木・土曜日 PM クリニック棟
    { id: '8', name: 'D', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'monday', required_count: 1, order_index: 1, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '9', name: '処', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'monday', required_count: 4, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    // 月・火・木・土曜日 PM 健診棟
    { id: '10', name: 'CF洗浄', facility: '健診棟', time_slot: 'PM', day_of_week: 'monday', required_count: 1, order_index: 1, remarks: '看護助手', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '11', name: '健診', facility: '健診棟', time_slot: 'PM', day_of_week: 'monday', required_count: 1, order_index: 2, remarks: '翌日健診準備', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },

    // 火曜日（月曜日と同じ）
    { id: '12', name: 'D', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'tuesday', required_count: 1, order_index: 1, remarks: 'PM、CF不可', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '13', name: '処', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'tuesday', required_count: 3, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '14', name: 'CF外', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'tuesday', required_count: 1, order_index: 3, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '15', name: 'CF中', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'tuesday', required_count: 1, order_index: 4, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '16', name: 'CF洗浄', facility: '健診棟', time_slot: 'AM', day_of_week: 'tuesday', required_count: 1, order_index: 1, remarks: 'AM健診棟の看護助手さんが行う', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '17', name: '健診G', facility: '健診棟', time_slot: 'AM', day_of_week: 'tuesday', required_count: 2, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '18', name: '健診', facility: '健診棟', time_slot: 'AM', day_of_week: 'tuesday', required_count: 4, order_index: 3, remarks: '最低3人', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '19', name: 'D', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'tuesday', required_count: 1, order_index: 1, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '20', name: '処', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'tuesday', required_count: 4, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '21', name: 'CF洗浄', facility: '健診棟', time_slot: 'PM', day_of_week: 'tuesday', required_count: 1, order_index: 1, remarks: '看護助手', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '22', name: '健診', facility: '健診棟', time_slot: 'PM', day_of_week: 'tuesday', required_count: 1, order_index: 2, remarks: '翌日健診準備', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },

    // 水曜日 AM 健診棟のみ
    { id: '23', name: '健診G', facility: '健診棟', time_slot: 'AM', day_of_week: 'wednesday', required_count: 2, order_index: 1, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '24', name: '健診', facility: '健診棟', time_slot: 'AM', day_of_week: 'wednesday', required_count: 4, order_index: 2, remarks: '最低3人', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    // 水曜日 PM 健診棟のみ
    { id: '25', name: '健診G', facility: '健診棟', time_slot: 'PM', day_of_week: 'wednesday', required_count: 1, order_index: 1, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '26', name: '健診', facility: '健診棟', time_slot: 'PM', day_of_week: 'wednesday', required_count: 3, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },

    // 木曜日（月曜日と同じ）
    { id: '27', name: 'D', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'thursday', required_count: 1, order_index: 1, remarks: 'PM、CF不可', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '28', name: '処', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'thursday', required_count: 3, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '29', name: 'CF外', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'thursday', required_count: 1, order_index: 3, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '30', name: 'CF中', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'thursday', required_count: 1, order_index: 4, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '31', name: 'CF洗浄', facility: '健診棟', time_slot: 'AM', day_of_week: 'thursday', required_count: 1, order_index: 1, remarks: 'AM健診棟の看護助手さんが行う', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '32', name: '健診G', facility: '健診棟', time_slot: 'AM', day_of_week: 'thursday', required_count: 2, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '33', name: '健診', facility: '健診棟', time_slot: 'AM', day_of_week: 'thursday', required_count: 4, order_index: 3, remarks: '最低3人', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '34', name: 'D', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'thursday', required_count: 1, order_index: 1, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '35', name: '処', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'thursday', required_count: 4, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '36', name: 'CF洗浄', facility: '健診棟', time_slot: 'PM', day_of_week: 'thursday', required_count: 1, order_index: 1, remarks: '看護助手', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '37', name: '健診', facility: '健診棟', time_slot: 'PM', day_of_week: 'thursday', required_count: 1, order_index: 2, remarks: '翌日健診準備', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },

    // 金曜日 AM クリニック棟
    { id: '38', name: 'D', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'friday', required_count: 1, order_index: 1, remarks: 'PM、CF不可', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '39', name: '処', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'friday', required_count: 3, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '40', name: 'CF外', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'friday', required_count: 1, order_index: 3, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '41', name: 'CF中', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'friday', required_count: 1, order_index: 4, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    // 金曜日 AM 健診棟
    { id: '42', name: 'CF洗浄', facility: '健診棟', time_slot: 'AM', day_of_week: 'friday', required_count: 1, order_index: 1, remarks: 'AM健診棟の看護助手さんが行う', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '43', name: '健診G', facility: '健診棟', time_slot: 'AM', day_of_week: 'friday', required_count: 2, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '44', name: '健診', facility: '健診棟', time_slot: 'AM', day_of_week: 'friday', required_count: 4, order_index: 3, remarks: '最低3人', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    // 金曜日 PM クリニック棟
    { id: '45', name: 'D', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'friday', required_count: 1, order_index: 1, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '46', name: '処', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'friday', required_count: 4, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    // 金曜日 PM 健診棟
    { id: '47', name: 'CF洗浄', facility: '健診棟', time_slot: 'PM', day_of_week: 'friday', required_count: 1, order_index: 1, remarks: '看護助手', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '48', name: '健診G', facility: '健診棟', time_slot: 'PM', day_of_week: 'friday', required_count: 1, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '49', name: '健診', facility: '健診棟', time_slot: 'PM', day_of_week: 'friday', required_count: 3, order_index: 3, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },

    // 土曜日（月曜日と同じ）
    { id: '50', name: 'D', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'saturday', required_count: 1, order_index: 1, remarks: 'PM、CF不可', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '51', name: '処', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'saturday', required_count: 3, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '52', name: 'CF外', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'saturday', required_count: 1, order_index: 3, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '53', name: 'CF中', facility: 'クリニック棟', time_slot: 'AM', day_of_week: 'saturday', required_count: 1, order_index: 4, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '54', name: 'CF洗浄', facility: '健診棟', time_slot: 'AM', day_of_week: 'saturday', required_count: 1, order_index: 1, remarks: 'AM健診棟の看護助手さんが行う', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '55', name: '健診G', facility: '健診棟', time_slot: 'AM', day_of_week: 'saturday', required_count: 2, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '56', name: '健診', facility: '健診棟', time_slot: 'AM', day_of_week: 'saturday', required_count: 4, order_index: 3, remarks: '最低3人', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '57', name: 'D', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'saturday', required_count: 1, order_index: 1, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '58', name: '処', facility: 'クリニック棟', time_slot: 'PM', day_of_week: 'saturday', required_count: 4, order_index: 2, remarks: '', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '59', name: 'CF洗浄', facility: '健診棟', time_slot: 'PM', day_of_week: 'saturday', required_count: 1, order_index: 1, remarks: '看護助手', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' },
    { id: '60', name: '健診', facility: '健診棟', time_slot: 'PM', day_of_week: 'saturday', required_count: 1, order_index: 2, remarks: '翌日健診準備', is_active: true, created_at: '2024-01-01T00:00:00Z', updated_at: '2024-01-01T00:00:00Z' }
  ])

  const [constraints, setConstraints] = useState<AIConstraintGuideline[]>([
    {
      id: '1',
      constraint_content: '新人スタッフは経験者とペアで配置してください。一人での対応は避けてください。',
      is_active: true,
      created_at: '2024-01-01T00:00:00Z',
      updated_at: '2024-01-01T00:00:00Z'
    },
    {
      id: '2',
      constraint_content: '妊娠中のスタッフは重労働を避け、デスクワーク中心の配置にしてください。',
      is_active: true,
      created_at: '2024-01-01T00:00:00Z',
      updated_at: '2024-01-01T00:00:00Z'
    },
    {
      id: '3',
      constraint_content: 'CF洗浄業務は技術資格を持つスタッフのみに配置してください。',
      is_active: true,
      created_at: '2024-01-01T00:00:00Z',
      updated_at: '2024-01-01T00:00:00Z'
    }
  ])

  const [shifts, setShifts] = useState<Shift[]>([])
  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([])
  const [loading, setLoading] = useState(false)

  // ==================== ユーティリティ ====================

  const generateId = () => {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
  }

  const getCurrentTimestamp = () => {
    return new Date().toISOString()
  }

  // ==================== 従業員管理 ====================

  const addEmployee = useCallback(async (employeeData: Omit<Employee, 'id' | 'created_at' | 'updated_at'>) => {
    const newEmployee: Employee = {
      ...employeeData,
      id: generateId(),
      created_at: getCurrentTimestamp(),
      updated_at: getCurrentTimestamp(),
    }
    setEmployees((prev) => [...prev, newEmployee])
    return newEmployee
  }, [])

  const updateEmployee = useCallback(async (id: string, updates: Partial<Employee>) => {
    setEmployees((prev) =>
      prev.map((emp) =>
        emp.id === id
          ? { ...emp, ...updates, updated_at: getCurrentTimestamp() }
          : emp
      )
    )
  }, [])

  const deleteEmployee = useCallback(async (id: string) => {
    setEmployees((prev) => prev.filter((emp) => emp.id !== id))
  }, [])

  const getEmployeeById = useCallback(
    (id: string) => {
      return employees.find((emp) => emp.id === id)
    },
    [employees]
  )

  // ==================== 配置場所管理 ====================

  const addWorkplace = useCallback(async (workplaceData: Omit<Workplace, 'id' | 'created_at' | 'updated_at'>) => {
    const newWorkplace: Workplace = {
      ...workplaceData,
      id: generateId(),
      created_at: getCurrentTimestamp(),
      updated_at: getCurrentTimestamp(),
    }
    setWorkplaces((prev) => [...prev, newWorkplace])
    return newWorkplace
  }, [])

  const updateWorkplace = useCallback(async (id: string, updates: Partial<Workplace>) => {
    setWorkplaces((prev) =>
      prev.map((wp) =>
        wp.id === id
          ? { ...wp, ...updates, updated_at: getCurrentTimestamp() }
          : wp
      )
    )
  }, [])

  const deleteWorkplace = useCallback(async (id: string) => {
    setWorkplaces((prev) => prev.filter((wp) => wp.id !== id))
  }, [])

  const getWorkplaceById = useCallback(
    (id: string) => {
      return workplaces.find((wp) => wp.id === id)
    },
    [workplaces]
  )

  // ==================== シフトパターン管理 ====================

  const addShiftPattern = useCallback(async (patternData: Omit<ShiftPattern, 'id'>) => {
    const newPattern: ShiftPattern = {
      ...patternData,
      id: generateId(),
    }
    setShiftPatterns((prev) => [...prev, newPattern])
    return newPattern
  }, [])

  const updateShiftPattern = useCallback(async (id: string, updates: Partial<ShiftPattern>) => {
    setShiftPatterns((prev) =>
      prev.map((pattern) =>
        pattern.id === id ? { ...pattern, ...updates } : pattern
      )
    )
  }, [])

  const deleteShiftPattern = useCallback(async (id: string) => {
    setShiftPatterns((prev) => prev.filter((pattern) => pattern.id !== id))
  }, [])

  const getShiftPatternById = useCallback(
    (id: string) => {
      return shiftPatterns.find((pattern) => pattern.id === id)
    },
    [shiftPatterns]
  )

  // ==================== シフト管理 ====================

  const addShift = useCallback(async (shiftData: Omit<Shift, 'id' | 'created_at' | 'updated_at'>) => {
    const newShift: Shift = {
      ...shiftData,
      id: generateId(),
      created_at: getCurrentTimestamp(),
      updated_at: getCurrentTimestamp(),
    }
    setShifts((prev) => [...prev, newShift])
    return newShift
  }, [])

  const updateShift = useCallback(async (id: string, updates: Partial<Shift>) => {
    setShifts((prev) =>
      prev.map((shift) =>
        shift.id === id
          ? { ...shift, ...updates, updated_at: getCurrentTimestamp() }
          : shift
      )
    )
  }, [])

  const deleteShift = useCallback(async (id: string) => {
    setShifts((prev) => prev.filter((shift) => shift.id !== id))
  }, [])

  const getShiftById = useCallback(
    (id: string) => {
      return shifts.find((shift) => shift.id === id)
    },
    [shifts]
  )

  const getShiftsByMonth = useCallback(
    (year: number, month: number) => {
      return shifts.filter((shift) => {
        const shiftDate = new Date(shift.date)
        return (
          shiftDate.getFullYear() === year &&
          shiftDate.getMonth() + 1 === month
        )
      })
    },
    [shifts]
  )

  const bulkUpsertShifts = useCallback(async (shiftsData: Omit<Shift, 'created_at' | 'updated_at'>[]) => {
    const timestamp = getCurrentTimestamp()

    setShifts((prev) => {
      const updatedShifts = [...prev]

      shiftsData.forEach((shiftData) => {
        if (shiftData.id) {
          // 既存シフトを更新
          const index = updatedShifts.findIndex((s) => s.id === shiftData.id)
          if (index !== -1) {
            updatedShifts[index] = {
              ...shiftData,
              created_at: updatedShifts[index].created_at,
              updated_at: timestamp,
            }
          } else {
            // IDがあるが見つからない場合は新規追加
            updatedShifts.push({
              ...shiftData,
              created_at: timestamp,
              updated_at: timestamp,
            })
          }
        } else {
          // 新規シフトを追加
          updatedShifts.push({
            ...shiftData,
            id: generateId(),
            created_at: timestamp,
            updated_at: timestamp,
          })
        }
      })

      return updatedShifts
    })
  }, [])

  // ==================== 希望休管理 ====================

  const addLeaveRequest = useCallback(async (leaveData: Omit<LeaveRequest, 'id' | 'created_at' | 'updated_at'>) => {
    const newLeave: LeaveRequest = {
      ...leaveData,
      id: generateId(),
      created_at: getCurrentTimestamp(),
      updated_at: getCurrentTimestamp(),
    }
    setLeaveRequests((prev) => [...prev, newLeave])
    return newLeave
  }, [])

  const updateLeaveRequest = useCallback(async (id: string, updates: Partial<LeaveRequest>) => {
    setLeaveRequests((prev) =>
      prev.map((leave) =>
        leave.id === id
          ? { ...leave, ...updates, updated_at: getCurrentTimestamp() }
          : leave
      )
    )
  }, [])

  const deleteLeaveRequest = useCallback(async (id: string) => {
    setLeaveRequests((prev) => prev.filter((leave) => leave.id !== id))
  }, [])

  const getLeaveRequestById = useCallback(
    (id: string) => {
      return leaveRequests.find((leave) => leave.id === id)
    },
    [leaveRequests]
  )

  const getLeaveRequestsByMonth = useCallback(
    (year: number, month: number) => {
      return leaveRequests.filter((leave) => {
        const leaveDate = new Date(leave.date)
        return (
          leaveDate.getFullYear() === year &&
          leaveDate.getMonth() + 1 === month
        )
      })
    },
    [leaveRequests]
  )

  // ==================== 制約管理 ====================

  const addConstraint = useCallback(async (constraintData: Omit<AIConstraintGuideline, 'id' | 'created_at' | 'updated_at'>) => {
    const newConstraint: AIConstraintGuideline = {
      ...constraintData,
      id: generateId(),
      created_at: getCurrentTimestamp(),
      updated_at: getCurrentTimestamp(),
    }
    setConstraints((prev) => [...prev, newConstraint])
    return newConstraint
  }, [])

  const updateConstraint = useCallback(async (id: string, updates: Partial<AIConstraintGuideline>) => {
    setConstraints((prev) =>
      prev.map((constraint) =>
        constraint.id === id
          ? { ...constraint, ...updates, updated_at: getCurrentTimestamp() }
          : constraint
      )
    )
  }, [])

  const deleteConstraint = useCallback(async (id: string) => {
    setConstraints((prev) => prev.filter((constraint) => constraint.id !== id))
  }, [])

  const getConstraintById = useCallback(
    (id: string) => {
      return constraints.find((constraint) => constraint.id === id)
    },
    [constraints]
  )

  // ==================== データリフレッシュ ====================

  const refreshAllData = useCallback(async () => {
    setLoading(true)
    try {
      // TODO: 将来的にSupabaseからデータ取得
      // const [employeesData, workplacesData, ...] = await Promise.all([
      //   fetch('/api/employees').then(r => r.json()),
      //   fetch('/api/workplaces').then(r => r.json()),
      //   ...
      // ])
      // setEmployees(employeesData)
      // setWorkplaces(workplacesData)
      // ...

      console.log('データリフレッシュ完了（現在はローカル状態のみ）')
    } catch (error) {
      console.error('データリフレッシュエラー:', error)
    } finally {
      setLoading(false)
    }
  }, [])

  // ==================== Context値 ====================

  const value: ShiftDataContextType = {
    employees,
    workplaces,
    shiftPatterns,
    shifts,
    leaveRequests,
    constraints,
    loading,
    setLoading,
    addEmployee,
    updateEmployee,
    deleteEmployee,
    getEmployeeById,
    addWorkplace,
    updateWorkplace,
    deleteWorkplace,
    getWorkplaceById,
    addShiftPattern,
    updateShiftPattern,
    deleteShiftPattern,
    getShiftPatternById,
    addShift,
    updateShift,
    deleteShift,
    getShiftById,
    getShiftsByMonth,
    bulkUpsertShifts,
    addLeaveRequest,
    updateLeaveRequest,
    deleteLeaveRequest,
    getLeaveRequestById,
    getLeaveRequestsByMonth,
    addConstraint,
    updateConstraint,
    deleteConstraint,
    getConstraintById,
    refreshAllData,
  }

  return (
    <ShiftDataContext.Provider value={value}>
      {children}
    </ShiftDataContext.Provider>
  )
}

// ==================== カスタムフック ====================

export function useShiftData() {
  const context = useContext(ShiftDataContext)
  if (context === undefined) {
    throw new Error('useShiftData must be used within a ShiftDataProvider')
  }
  return context
}
